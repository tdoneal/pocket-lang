
insertionSort func (A list)
    i : 1
    while i < A.len
        j : i
        while j > 0 & A(j-1) > A(j)
            temp : A(j)
            A(j) : A(j-1)
            A(j-1) : temp
            j--
        i++

bubbleSort func (A list)
    n : A.len
    while n > 1
        newn : 0
        for i : 1, i < n, i ++
            if A(i-1) > A(i)
                temp : A(i-1)
                A(i-1) : A(i)
                A(i) : temp
                newn: i
        n : newn


mergeSort func (m list) list
    if m.len <= 1
        return m

    left : []
    right : []
    for i : 0, i < m.len, i ++
        x : m(i)
        if i < m.len / 2
            left : left + [x]
        else
            right : right + [x]

    left : mergeSort(left)
    right : mergeSort(right)

    return merge(left, right)

merge func (left list, right list) list
    result : []
    
    lptr : 0
    rptr : 0
    while lptr < left.len & rptr < right.len
        if left(lptr) < right(rptr)
            result : result + [left(lptr)]
            lptr ++
        else
            result : result + [right(rptr)]
            rptr ++

    while lptr < left.len
        result : result + [left(lptr)]
        lptr ++

    while rptr < right.len
        result : result + [right(rptr)]
        rptr ++

    return result


genlist func() list
    l list : []
    s : 0
    sd : 69
    maxlen : 1000
    for li : 0, li < maxlen, li ++
        l +: [(s % maxlen)]
        s +: sd
    return l
